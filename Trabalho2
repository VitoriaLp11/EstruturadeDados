package trabalhoDois;
import java.util.*;
import java.io.*;

public class OrdenacaoComparativa {

	// Classe para contar comparações e trocas
	static class Contador {
		int comparacoes = 0;
		int trocas = 0;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		while (true) {
			int[] vetorOriginal = new int[8];
			boolean entradaValida = true;

			System.out.println("\nDigite 8 números inteiros POSITIVOS e PARES:");

			for (int i = 0; i < vetorOriginal.length; i++) {
				System.out.print("Número " + (i + 1) + ": ");
				int num = scanner.nextInt();

				if (num <= 0 || num % 2 != 0) {
					System.out.println("AVISO: Número inválido (deve ser positivo e par). Reiniciando entrada...");
					entradaValida = false;
					break;
				}
				vetorOriginal[i] = num;
			}

			if (!entradaValida) continue;

			System.out.println("\nEntrada aceita! Prosseguindo com a ordenação...");

			// Clonar vetores para os 3 algoritmos
			int[] vetorSelection = vetorOriginal.clone();
			int[] vetorQuick = vetorOriginal.clone();
			int[] vetorMerge = vetorOriginal.clone();

			// Contadores separados para cada algoritmo
			Contador contadorSelection = new Contador();
			Contador contadorQuick = new Contador();
			Contador contadorMerge = new Contador();

			// Aplicar algoritmos
			selectionSort(vetorSelection, contadorSelection);
			quickSort(vetorQuick, 0, vetorQuick.length - 1, contadorQuick);
			mergeSort(vetorMerge, 0, vetorMerge.length - 1, contadorMerge);

			// Exibir no console
			System.out.println("\nVetor original: " + Arrays.toString(vetorOriginal));
			exibirResultado("Selection Sort", vetorSelection, contadorSelection);
			exibirResultado("Quick Sort", vetorQuick, contadorQuick);
			exibirResultado("Merge Sort", vetorMerge, contadorMerge);

			// Exportar para arquivo
			exportarResultados("resultado.txt", vetorOriginal,
				vetorSelection, contadorSelection,
				vetorQuick, contadorQuick,
				vetorMerge, contadorMerge);

			break;
		}

		scanner.close();
	}

	// Exibe o resultado no console
	private static void exibirResultado(String nomeAlgoritmo, int[] vetor, Contador contador) {
		System.out.println("\nAlgoritmo: " + nomeAlgoritmo);
		System.out.println("Vetor ordenado: " + Arrays.toString(vetor));
		System.out.println("Comparações: " + contador.comparacoes);
		System.out.println("Trocas: " + contador.trocas);
	}

	// Exporta todos os resultados para um arquivo
	private static void exportarResultados(String nomeArquivo,
			int[] original,
			int[] selection, Contador c1,
			int[] quick, Contador c2,
			int[] merge, Contador c3) {
		try (PrintWriter writer = new PrintWriter(nomeArquivo)) {
			writer.println("Vetor original: " + Arrays.toString(original));
			salvarResultado(writer, "Selection Sort", selection, c1);
			salvarResultado(writer, "Quick Sort", quick, c2);
			salvarResultado(writer, "Merge Sort", merge, c3);
			System.out.println("\nResultados exportados para '" + nomeArquivo + "'.");
		} catch (IOException e) {
			System.out.println("Erro ao salvar o arquivo: " + e.getMessage());
		}
	}

	private static void salvarResultado(PrintWriter writer, String nome, int[] vetor, Contador contador) {
		writer.println("\nAlgoritmo: " + nome);
		writer.println("Vetor ordenado: " + Arrays.toString(vetor));
		writer.println("Comparações: " + contador.comparacoes);
		writer.println("Trocas: " + contador.trocas);
	}

	// --- Algoritmos de Ordenação ---

	private static void selectionSort(int[] vetor, Contador contador) {
		int n = vetor.length;

		for (int i = 0; i < n - 1; i++) {
			int min = i;
			for (int j = i + 1; j < n; j++) {
				contador.comparacoes++;
				if (vetor[j] < vetor[min]) {
					min = j;
				}
			}
			if (i != min) {
				trocar(vetor, i, min, contador);
				contador.trocas += 2; // Considerando troca de posições
			}
		}
	}

	private static void quickSort(int[] vetor, int ini, int fim, Contador contador) {
		if (ini < fim) {
			int pi = particionar(vetor, ini, fim, contador);
			quickSort(vetor, ini, pi - 1, contador);
			quickSort(vetor, pi + 1, fim, contador);
		}
	}

	private static int particionar(int[] vetor, int ini, int fim, Contador contador) {
		int pivo = vetor[fim];
		int i = ini - 1;

		for (int j = ini; j < fim; j++) {
			contador.comparacoes++;
			if (vetor[j] < pivo) {
				i++;
				trocar(vetor, i, j, contador);
			}
		}

		trocar(vetor, i + 1, fim, contador);
		return i + 1;
	}

	private static void trocar(int[] vetor, int i, int j, Contador contador) {
		if (i != j) {
			int temp = vetor[i];
			vetor[i] = vetor[j];
			vetor[j] = temp;
			contador.trocas++;
		}
	}

	private static void mergeSort(int[] vetor, int esq, int dir, Contador contador) {
		if (esq < dir) {
			int meio = (esq + dir) / 2;
			mergeSort(vetor, esq, meio, contador);
			mergeSort(vetor, meio + 1, dir, contador);
			intercalar(vetor, esq, meio, dir, contador);
		}
	}

	private static void intercalar(int[] vetor, int esq, int meio, int dir, Contador contador) {
		int n1 = meio - esq + 1;
		int n2 = dir - meio;

		int[] L = new int[n1];
		int[] R = new int[n2];

		for (int i = 0; i < n1; i++) L[i] = vetor[esq + i];
		for (int j = 0; j < n2; j++) R[j] = vetor[meio + 1 + j];

		int i = 0, j = 0, k = esq;

		while (i < n1 && j < n2) {
			contador.comparacoes++;
			if (L[i] <= R[j]) {
				vetor[k++] = L[i++];
			} else {
				vetor[k++] = R[j++];
				contador.trocas++;
			}
		}

		while (i < n1) vetor[k++] = L[i++];
		while (j < n2) vetor[k++] = R[j++];
	}
}
