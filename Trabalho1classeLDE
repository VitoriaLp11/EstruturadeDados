package TrabalhoLDE;

/**
 * Representa uma Lista Duplamente Encadeada com inserção ordenada.
 */
public class LDE {
	private Nodo inicio;

	public LDE() {
		this.inicio = null;
	}

	/**
	 * Insere um valor na lista de forma ordenada.
	 * Evita inserir valores duplicados.
	 */
	public void inserirOrdenado(int valor) {
		Nodo novoNodo = new Nodo(valor, null, null);

		if (inicio == null) {
			inicio = novoNodo;
			return;
		}

		if (valor < inicio.getValor()) {
			novoNodo.setProximo(inicio);
			inicio.setAnterior(novoNodo);
			inicio = novoNodo;
			return;
		}

		Nodo atual = inicio;

		// Verifica se o valor já existe na lista
		while (atual != null) {
			if (atual.getValor() == valor) {
				System.out.println("Valor " + valor + " já está na lista. Não será inserido novamente.");
				return;
			}
			atual = atual.getProximo();
		}

		atual = inicio;
		while (atual.getProximo() != null && atual.getProximo().getValor() < valor) {
			atual = atual.getProximo();
		}

		novoNodo.setProximo(atual.getProximo());
		if (atual.getProximo() != null) {
			atual.getProximo().setAnterior(novoNodo);
		}
		atual.setProximo(novoNodo);
		novoNodo.setAnterior(atual);
	}

	/**
	 * Imprime todos os elementos da lista.
	 */
	public void imprimir() {
		if (inicio == null) {
			System.out.println("Lista vazia!");
			return;
		}

		Nodo atual = inicio;
		int posicao = 1;

		while (atual != null) {
			System.out.println("Posição " + posicao + ": Valor " + atual.getValor());
			atual = atual.getProximo();
			posicao++;
		}
	}

	/**
	 * Remove o primeiro nó com o valor informado, se existir.
	 */
	public void removerValor(int valor) {
		if (inicio == null) {
			System.out.println("Lista vazia!");
			return;
		}

		Nodo atual = inicio;

		while (atual != null) {
			if (atual.getValor() == valor) {
				if (atual.getAnterior() != null) {
					atual.getAnterior().setProximo(atual.getProximo());
				} else {
					inicio = atual.getProximo();
				}

				if (atual.getProximo() != null) {
					atual.getProximo().setAnterior(atual.getAnterior());
				}

				System.out.println("Valor " + valor + " removido!");
				return;
			}
			atual = atual.getProximo();
		}
		System.out.println("Valor não encontrado!");
	}

	/**
	 * Pesquisa um valor na lista e informa sua posição.
	 */
	public void pesquisar(int valor) {
		Nodo atual = inicio;
		int posicao = 1;

		while (atual != null) {
			if (atual.getValor() == valor) {
				System.out.println("Valor " + valor + " encontrado na posição " + posicao + ".");
				return;
			}
			atual = atual.getProximo();
			posicao++;
		}
		System.out.println("Valor " + valor + " não encontrado na lista.");
	}
}
